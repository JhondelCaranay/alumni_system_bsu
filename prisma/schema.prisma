// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN // can control everything - can create group chat
  FACULTY_MEMBER // normal faculty member
  FACULTY_ADVISER // include in group chat per section
  FACULTY_COORDINATOR // 7 programs 
  FACULTY_AlUMNI // former student
  FACULTY_STUDENT // current student
  PESO // can post job openings , Public Employment Service Office
  BULSU_PARTNER // can post job openings
}

enum Gender {
  MALE
  FEMALE
}

enum PostType {
  ANNOUNCEMENT
  JOBS
  FEED
}

// enum Relationship {
//   FATHER
//   MOTHER
//   GUARDIAN
// }

model Event {
  id String @id @default(uuid())

  title       String
  description String @db.Text

  dateStart DateTime
  timeStart DateTime
  timeEnd   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user who owns the event post
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model Post {
  id String @id @default(uuid())

  title       String
  description String @db.Text

  company  String
  location String

  type PostType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]

  // user who owns the post
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model Comment {
  id String @id @default(uuid())

  description String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  @@index([userId])
  @@index([postId])
}

model Section {
  id String @id @default(uuid())

  name String
  year Int

  members User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // TODO: ADD GROUP CHAT PER SECTION

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?

  @@index([departmentId])
}

// change course to department
model Department {
  id String @id @default(uuid())

  name String

  sections Section[]
  users    User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Parent {
//   id String @id @unique @default(uuid())

//   firstname  String
//   lastName   String
//   occupation String

//   relationShip Relationship

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   profileId String
//   profile   Profile @relation(fields: [profileId], references: [id])

//   @@index([profileId])
// }

model Profile {
  id String @id @unique @default(uuid())

  studentNumber String?
  yearEnrolled  DateTime?
  yearGraduated DateTime?

  alternative_email String? // personal email

  firstname  String?
  lastname   String?
  middlename String?

  age      Int?
  religion String?
  gender   Gender?

  placeOfBirth String?
  dateOfBirth  String?
  homeNo       String?
  street       String?
  barangay     String?
  city         String?
  corUrl       String? @db.Text
  province     String?
  contactNo    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // parents Parent[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@index([userId])
}

model User {
  id String @id @default(cuid())

  name          String?
  username      String
  email         String?   @unique // bsu email format
  emailVerified DateTime?
  image         String?
  archive       Boolean   @default(false)
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role

  accounts Account[]
  sessions Session[]
  profile  Profile?
  events   Event[]
  comment  Comment[]

  section   Section? @relation(fields: [sectionId], references: [id])
  sectionId String?

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  Post         Post[]

  @@index([sectionId])
  @@index([departmentId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Necessary for Next auth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
