// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN // can control everything - can create group chat
  ADVISER // include in group chat per section
  COORDINATOR // 7 programs 
  ALUMNI // former student
  STUDENT // current student
  PESO // can post job openings , Public Employment Service Office
  BULSU_PARTNER // can post job openings
}

enum Gender {
  MALE
  FEMALE
}

enum PostType {
  ANNOUNCEMENT
  JOBS
  FEED
}

// enum Relationship {
//   FATHER
//   MOTHER
//   GUARDIAN
// }

model GroupChatMessage {
  id String @id @default(cuid())

  message String @db.Text

  sender   User?   @relation("GroupChatMessages", fields: [senderId], references: [id])
  senderId String?

  groupChat   GroupChat? @relation(fields: [groupChatId], references: [id])
  groupChatId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupChatId])
}

model GroupChat {
  id String @id @default(cuid())

  name String @unique
  year Int?

  messages GroupChatMessage[]
  students User[]             @relation("GroupChatStudents")

  adviser   User?   @relation(name: "GroupChatAdviser", fields: [adviserId], references: [id])
  adviserId String?

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?

  section   Section? @relation(fields: [sectionId], references: [id])
  sectionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([departmentId])
  @@index([adviserId])
}

model Event {
  id String @id @default(cuid())

  title       String
  description String @db.Text

  isArchived Boolean @default(false)

  dateStart DateTime
  dateEnd   DateTime
  allDay    Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user who owns the event post
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model Photos {
  id String @id @default(cuid())

  public_url String @db.Text
  public_id  String @db.Text

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}

model Post {
  id String @id @default(cuid())

  title       String?
  description String  @db.Text

  company  String?
  location String?

  isArchived Boolean @default(false)

  type PostType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments   Comment[]
  department Department[]
  photos     Photos[]
  // user who owns the post
  user       User         @relation(fields: [userId], references: [id])
  userId     String

  @@index([userId])
}

model Comment {
  id String @id @default(cuid())

  description String  @db.Text
  isArchived  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  commentId String?
  comment   Comment?  @relation("CommentReply", fields: [commentId], references: [id])
  replies   Comment[] @relation("CommentReply")

  @@index([userId])
  @@index([postId])
}

model Section {
  id String @id @default(cuid())

  name        String
  school_year String? // 2023 - 2026
  course_year Int? // 1st - 4th year

  isArchived Boolean @default(false)

  members   User[]
  groupChat GroupChat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // TODO: ADD GROUP CHAT PER SECTION

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?

  // @@unique([name, school_year, departmentId])
  @@index([departmentId])
}

// change course to department
model Department {
  id String @id @default(cuid())

  name       String  @unique
  isArchived Boolean @default(false)

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // post   Post?   @relation(fields: [postId], references: [id])
  // postId String?
  posts Post[]

  groupChat GroupChat[]
  sections  Section[]
}

model Guardian {
  id String @id @unique @default(cuid())

  firstname  String
  lastname   String
  occupation String
  contactNo  String?

  relationship String
  isArchived   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // STUDENT ID
  childrenId String
  profile    Profile @relation(fields: [childrenId], references: [id])

  @@index([childrenId])
}

model Profile {
  id String @id @unique @default(cuid())

  isEmployed    Boolean   @default(false)
  studentNumber Int?
  schoolYear    Int? // STUDENT CURRENT COURSE YEAR 
  yearEnrolled  DateTime?
  yearGraduated DateTime?

  alternative_email String? // personal email

  firstname  String?
  lastname   String?
  middlename String?

  age      Int?
  religion String?
  gender   Gender?

  placeOfBirth String?
  dateOfBirth  DateTime?
  homeNo       String?
  street       String?
  barangay     String?
  city         String?
  corUrl       String?   @db.Text
  province     String?
  contactNo    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parents Guardian[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@index([userId])
}

model User {
  id String @id @default(cuid())

  isArchived     Boolean   @default(false)
  name           String?
  email          String?   @unique // bsu email format
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  role Role

  accounts Account[]
  sessions Session[]
  profile  Profile?
  events   Event[]
  comments Comment[]
  posts    Post[]

  groupChatMessages GroupChatMessage[] @relation("GroupChatMessages")
  groupChats        GroupChat[]        @relation("GroupChatStudents")
  adviserGroupChats GroupChat[]        @relation("GroupChatAdviser")

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?

  section   Section? @relation(fields: [sectionId], references: [id])
  sectionId String?

  @@index([sectionId])
  @@index([departmentId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Necessary for Next auth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
