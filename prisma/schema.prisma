// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum GenderType {
  MALE
  FEMALE
}

model Course {
  id        String   @id @default(uuid())
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  announcements Announcement[]
  profiles      Profile[]

  @@index([id])
}

// for events
model Event {
  id        String   @id @default(uuid())
  title     String
  timeStart DateTime
  timeEnd   DateTime
  allDay    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  description String
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Parent {
  id           String   @id @unique @default(uuid())
  firstname    String
  lastName     String
  occupation   String
  relationShip String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  @@index([profileId])
  @@index([id])
}

enum Status {
  UNDERGRADUATE
  GRADUATE
}

model Profile {
  id            String     @id @unique @default(uuid())
  studentNumber String
  firstname     String?
  lastname      String?
  middlename    String?
  age           Int?
  religion      String?
  gender        GenderType
  placeOfBirth  String?
  dateOfBirth   String?
  homeNo        String?
  street        String?
  barangay      String?
  city          String?
  cor           String?
  province      String?
  contactNo     String?
  section       String?
  status        Status     @default(UNDERGRADUATE)
  bsu_email     String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  parents       Parent[]
  courseId      String
  course        Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Necessary for Next auth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  ADMIN_ORG
  STUDENT
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  archive       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  role          Role
  profile       Profile?
  events        Event[]
  announcements Announcement[]

  @@index([id])
  @@index([role])
}

// Necessary for Next auth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
